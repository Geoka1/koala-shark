#!/usr/bin/env python3

import argparse
from pathlib import Path
import os
import time
from subprocess import run, PIPE

parser = argparse.ArgumentParser(description="Run benchmark")
parser = argparse.ArgumentParser(description="Run benchmark")
parser.add_argument('--window', default=5, type=int, help='window size to run hs with')
parser.add_argument('--target', required=True, choices=['hs-only', 'sh-only', 'both'],
                    help='to run with sh or hs')
parser.add_argument('--log', choices=['enable', 'disable'], default="enable",
                    help='whether to enable logging for hs')
parser.add_argument('--tmpdir', type=Path)
parser.add_argument('--input-size', required=True, choices=["small","medium","large"], help='size of inputs')

env = os.environ.copy()

def do_sh_run(test_base: Path, size: str, output_base: Path, env: dict):
    cmd = ['/bin/sh', test_base / "fxbio4.sh", f"{size}/list"]
    print(f'Running {cmd}')
    before = time.time()
    result = run(cmd, stdout=PIPE, env=env)
    duration = time.time() - before
    
    with open(output_base / "sh_time", 'w') as f:
        f.write(f'{duration}\n')
    return result.returncode, result.stdout

def do_hs_run(test_base: Path, size: str, output_base: Path, hs_base: Path, window: int, env: dict, log: bool):
    cmd = [hs_base / 'pash-spec.sh', '--window', str(window)]
    if log:
        cmd.extend(['-d', '2'])
    cmd.extend([test_base / "fxbio4.sh", f"{size}/list"])
    print(f'Running {cmd}')
    before = time.time()
    with open(output_base / "hs_log", 'w') as log:
        result = run(cmd, stdout=PIPE, stderr=log, env=env)
    duration = time.time() - before
    with open(output_base / "hs_time", 'w') as f:
        f.write(f'{duration}\n')
    return result.returncode, result.stdout

if __name__ == '__main__':
    args = parser.parse_args()
    test_base = Path(__file__).parent.resolve()
    hs_base = test_base.parent.parent.parent
    local_name = os.sep.join(test_base.parts[-1:])
    output_base = hs_base / "report" / "output" / local_name / str(args.input_size)
    resources_base = hs_base / "report" / "resources" / local_name
    
    #######################
    # SPECIFY ENV VARS HERE
    #######################
    if args.tmpdir: env['PASH_TMP_DIR'] = str(args.tmpdir)
    
    env['PASH_TOP'] = str(hs_base / "deps" / "pash")
    env['PASH_SPEC_TOP'] = str(hs_base)
    env['BIODIR'] = str(test_base)
    env['IN'] = str(resources_base)
    env['OUT'] = str(output_base)

    run_hs = False
    run_sh = False
    if args.target in ["hs-only", "both"]:
        run_hs = True
    if args.target in ["sh-only", "both"]:
        run_sh = True
    if not run_hs and not run_sh:
        raise("Not running anything, add --target argument")
    output_base.mkdir(parents=True, exist_ok=True)

    if run_sh:
        output_sh = do_sh_run(test_base, args.input_size, output_base, env)
    if run_hs:
        output_hs = do_hs_run(test_base, args.input_size, output_base, hs_base, args.window, env, args.log == 'enable')
    if run_sh and run_hs:
        with open(output_base / "error", 'w') as errf:
            # print(output_sh[:100])
            if output_sh == output_hs:
                errf.write('')
            else:
                errf.write('error\n')
                errf.write(f'return code {output_sh[0]} vs {output_hs[0]}\n')
                errf.write(f'==== output sh ====\n')
                errf.write(output_sh[1].decode('UTF-8'))
                errf.write(f'==== output hs ====\n')
                errf.write(output_hs[1].decode('UTF-8'))

    
