#!/usr/bin/env python3

import argparse
from pathlib import Path
import os
import time
from subprocess import run, PIPE
import shutil

parser = argparse.ArgumentParser(description="Run benchmark")
parser = argparse.ArgumentParser(description="Run benchmark")
parser.add_argument('script', type=str, help='test_name')
parser.add_argument('--window', default=5, type=int, help='window size to run hs with')
parser.add_argument('--target', choices=['hs-only', 'sh-only', 'both'],
                    help='to run with sh or hs')
parser.add_argument('--log', choices=['enable', 'disable'], default="enable",
                    help='whether to enable logging for hs')
parser.add_argument('--tmpdir', type=Path)

env = os.environ.copy()

def do_sh_run(test_base: Path, script_name: str, output_base: Path, env: dict):
    cmd = ['/bin/sh', test_base / "scripts" / script_name]
    print(f'Running {cmd}')
    before = time.time()
    result = run(cmd, stdout=PIPE, env=env)
    duration = time.time() - before

    with open(output_base / f"{Path(script_name).stem}" / "sh_time", 'w') as f:
        f.write(f'{duration}\n')
    return result.returncode, result.stdout

def do_strace_run(test_base: Path, script_name: str, output_base: Path, env: dict):
    # strace -y -f  --seccomp-bpf --trace=fork,clone,%file -o $TRACE_FILE env -i bash -c "$RUN"
    cmd = ['strace', '-y', '-f', '--seccomp-bpf', '--trace=fork,clone,%file', '-o', output_base / f"{Path(script_name).stem}" / "strace_log"]
    cmd.append(test_base / "scripts" / script_name)
    print(f'Running {cmd}')
    before = time.time()
    with open(output_base / f"{Path(script_name).stem}" / "strace_log", 'w') as log:
        result = run(cmd, stdout=PIPE, stderr=log, env=env)
    duration = time.time() - before
    with open(output_base / f"{Path(script_name).stem}" / "sstrace_time", 'w') as f:
        f.write(f'{duration}\n')
    return result.returncode, result.stdout

def do_strace_parse_run(test_base: Path, script_name: str, output_base: Path, env: dict, tracev2_base: Path):
    cmd = ['strace', '-y', '-f', '--seccomp-bpf', '--trace=fork,clone,%file', '-o', output_base / f"{Path(script_name).stem}" / "trace_v2_log"]
    cmd.append(test_base / "scripts" / script_name)
    print(f'Running {cmd}')
    before = time.time()
    with open(output_base / f"{Path(script_name).stem}" / "trace_v2_log", 'w') as log:
        result = run(cmd, stdout=PIPE, stderr=log, env=env)
    cmd2 = ["python3", tracev2_base, output_base / f"{Path(script_name).stem}" / "trace_v2_log"]
    print(f'Running {cmd2}')
    with open(output_base / f"{Path(script_name).stem}" / "trace_v2_log_parsed", 'w') as log:
        result = run(cmd2, stdout=PIPE, stderr=log, env=env)
    duration = time.time() - before
    with open(output_base / f"{Path(script_name).stem}" / "sstrace_parse_time", 'w') as f:
        f.write(f'{duration}\n')
    return result.returncode, result.stdout

def do_hs_run(test_base: Path, script_name: str, output_base: Path, hs_base: Path, env: dict):
    cmd = [hs_base / 'pash-spec.sh', '--window', '0', '-d', '2']
    cmd.append(test_base / "scripts" / script_name)
    print(f'Running {cmd}')
    before = time.time()
    with open(output_base / f"{Path(script_name).stem}" / "hs_log", 'w') as log:
        result = run(cmd, stdout=PIPE, stderr=log, env=env)
    duration = time.time() - before
    with open(output_base / f"{Path(script_name).stem}" / "hs_time", 'w') as f:
        f.write(f'{duration}\n')
    return result.returncode, result.stdout

def do_try_only_run(test_base: Path, script_name: str, output_base: Path, hs_base: Path, env: dict):
    cmd = [hs_base / 'deps' / 'try' / 'try', '-y']
    cmd.append(test_base / "scripts" / script_name)
    print(f'Running {cmd}')
    before = time.time()
    with open(output_base / f"{Path(script_name).stem}" / "try_log", 'w') as log:
        result = run(cmd, stdout=PIPE, stderr=log, env=env)
    duration = time.time() - before
    with open(output_base / f"{Path(script_name).stem}" / "try_time", 'w') as f:
        f.write(f'{duration}\n')
    return result.returncode, result.stdout

if __name__ == '__main__':
    args = parser.parse_args()
    test_base = Path(__file__).parent.resolve()
    hs_base = test_base.parent.parent.parent
    local_name = os.sep.join(test_base.parts[-1:])
    output_base = hs_base / "report" / "output" / local_name
    output_base.mkdir(parents=True, exist_ok=True)
    scripts_dir = test_base / "scripts"
    tracev2_base = hs_base / "parallel-orch" / "trace_v2.py"
    
    #######################
    # SPECIFY ENV VARS HERE
    #######################
    if args.tmpdir: env['PASH_TMP_DIR'] = str(args.tmpdir)
    
    env['PASH_TOP'] = str(hs_base / "deps" / "pash")
    env['PASH_SPEC_TOP'] = str(hs_base)
    env['SCRIPTS'] = str(scripts_dir)
    env['OUTPUT'] = str(output_base)
    env['TRY'] = str(hs_base / 'deps' / 'try' / 'try')

    script_name = args.script
    (output_base / f"{Path(script_name).stem}").mkdir(exist_ok=True, parents=True)
    output_sh = do_sh_run(test_base, script_name, output_base, env)
    with open(output_base / f"{Path(script_name).stem}" / "sh_stdout", 'w') as f:
        f.write(output_sh[1].decode())
    shutil.rmtree(output_base / "foo")
    # output_hs = do_hs_run(test_base, script_name, output_base, hs_base, env)
    # with open(output_base / f"{Path(script_name).stem}" / "hs_stdout", 'w') as f:
    #     f.write(output_hs[1].decode())    
    # shutil.rmtree(output_base / "foo")
    # output_strace = do_strace_run(test_base, script_name, output_base, env)
    # with open(output_base / f"{Path(script_name).stem}" / "strace_stdout", 'w') as f:
    #     f.write(output_strace[1].decode())
    # shutil.rmtree(output_base / "foo")
    # output_trace_and_parse = do_strace_parse_run(test_base, script_name, output_base, env, tracev2_base)
    # with open(output_base / f"{Path(script_name).stem}" / "strace_parsed_stdout", 'w') as f:
    #     f.write(output_trace_and_parse[1].decode())
    # shutil.rmtree(output_base / "foo")
    output_try = do_try_only_run(test_base, script_name, output_base, hs_base, env)
    with open(output_base / f"{Path(script_name).stem}" / "try_stdout", 'w') as f:
        f.write(output_try[1].decode())
    

