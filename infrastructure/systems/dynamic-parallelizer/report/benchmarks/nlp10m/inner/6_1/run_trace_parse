#!/bin/python3

import os
import subprocess
import time

# Benchmark number
BENCHMARK_NO = "6_1"

# Base directories
HS_BASE = subprocess.check_output(["git", "rev-parse", "--show-toplevel"]).decode("utf-8").strip()
TEST_BASE = os.path.join(HS_BASE, "report/benchmarks/nlp10m", f"{BENCHMARK_NO}")
TEST_UPPER = os.path.join(HS_BASE, "report")
RESOURCE_DIR = os.path.join(HS_BASE, "report/resources/nlp10m")
STRACE = "strace -y -f  --seccomp-bpf --trace=fork,clone,%file -o $(mktemp) env -i bash -c"
PARSE = os.path.join(HS_BASE, "parallel-orch/trace_v2.py")
PARSE_CMD = f"python3 {PARSE}"

# Script to run
SCRIPT_NAME = f"{BENCHMARK_NO}.strace.parse.sh"

# Environment variables
os.environ["INPUT_FILE"] = os.path.join(RESOURCE_DIR, "pg")
os.environ["STRACE"] = STRACE
os.environ["OUTPUT_DIR"] = os.path.join(HS_BASE, "report/output/nlp10m", f"{BENCHMARK_NO}")
os.environ["PARSE"] = PARSE_CMD

# Timing the script
script_path = os.path.join(TEST_BASE, SCRIPT_NAME)
start_time = time.time()
# Save the timing to try_time.sh
output_dir = os.environ["OUTPUT_DIR"]
os.makedirs(output_dir, exist_ok=True)  # Ensure the directory exists

try:
    # Execute the script
    subprocess.run(["bash", script_path], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    success = True
except subprocess.CalledProcessError as e:
    print(f"Error executing the script: {e}")
    success = False

elapsed_time = time.time() - start_time

timing_file = os.path.join(output_dir, "strace_parse_time")

with open(timing_file, "w") as f:
    f.write(f"{elapsed_time:.6f}")

print(f"Elapsed time: {elapsed_time:.6f} seconds")
print(f"Timing saved to: {timing_file}")
