#!/usr/bin/env python3

import argparse
from pathlib import Path
import os
import time
from subprocess import run, PIPE

parser = argparse.ArgumentParser(description="Run benchmark")
parser = argparse.ArgumentParser(description="Run benchmark")
parser.add_argument('--window', default=5, type=int, help='window size to run hs with')
parser.add_argument('--target', choices=['original', 'hs-only', 'sh-only', 'both'],
                    help='to run with sh or hs or both sh and hs or run the original manual parallelization using & and wait')
parser.add_argument('--log', choices=['enable', 'disable'], default="enable",
                    help='whether to enable logging for hs')
parser.add_argument('--merge', action='store_true', help='do 5TERA3-merge as well')

teraseq_samples = Path("/root/TERA-Seq_manuscript/samples")

def clean_outputs(test_base: Path):
    result = run(f"find {teraseq_samples} -mindepth 3 ! -type d ! -regex '.*reads\.[0-9]\.fastq\.gz' | xargs -r rm", shell=True)
    return

def hash_result(test_base: Path, output_base: Path):
    result = run([test_base / "hash_result.sh"], stdout=PIPE)
    return result.stdout

def do_original_run(test_base: Path, output_base: Path, do_merge: bool = False):
    os.chdir(teraseq_samples)
    clean_outputs(test_base)
    before = time.time()
    result = run(['/bin/bash', test_base / f'run_{test_base.parts[-1]}.sh'], stdout=PIPE)
    duration = time.time() - before
    with open(output_base / "orig_time", 'w') as f:
        f.write(f'{duration}\n')
    if do_merge:
        before = time.time()
        merge_result = run(['/bin/bash', test_base / f'run_{test_base.parts[-1]}-merge.sh'], stdout=PIPE)
        duration = time.time() - before
        with open(output_base / "orig_time_merge", 'w') as f:
            f.write(f'{duration}\n')
    orig_hashes = hash_result(test_base, output_base)
    return (result.returncode, (merge_result.returncode if do_merge else 0)), (result.stdout + (merge_result.stdout if do_merge else b"")), orig_hashes

def do_sh_run(test_base: Path, output_base: Path, do_merge: bool = False):
    os.chdir(teraseq_samples)
    clean_outputs(test_base)
    before = time.time()
    result = run(['/bin/sh', test_base / 'run.sh'], stdout=PIPE)
    duration = time.time() - before
    with open(output_base / "sh_time", 'w') as f:
        f.write(f'{duration}\n')
    if do_merge:
        before = time.time()
        merge_result = run(['/bin/sh', test_base / 'run_merge.sh'], stdout=PIPE)
        duration = time.time() - before
        with open(output_base / "sh_time_merge", 'w') as f:
            f.write(f'{duration}\n')
    sh_hashes = hash_result(test_base, output_base)
    return (result.returncode, (merge_result.returncode if do_merge else 0)), (result.stdout + (merge_result.stdout if do_merge else b"")), sh_hashes

def do_hs_run(test_base: Path, output_base: Path, hs_base: Path, window: int, log: bool, do_merge: bool = False):
    #run("rm -rf /tmp/*", shell=True)
    os.chdir(teraseq_samples)
    clean_outputs(test_base)
    cmd = [hs_base / 'pash-spec.sh', '--window', str(window)]
    if log:
        cmd.extend(['-d', '2'])
    cmd.append(test_base / 'run.sh')
    before = time.time()
    with open(output_base / 'hs_log', 'w') as logf:
        result = run(cmd, stdout=PIPE, stderr=logf)
    duration = time.time() - before
    with open(output_base / "hs_time", 'w') as f:
        f.write(f'{duration}\n')
    if do_merge:
        cmd = [hs_base / 'pash-spec.sh', '--window', str(window)]
        if log:
            cmd.extend(['-d', '2'])
        cmd.append(test_base / 'run_merge.sh')
        before = time.time()
        with open(output_base / 'hs_log_merge', 'w') as logf:
            merge_result = run(cmd, stdout=PIPE, stderr=logf)
        duration = time.time() - before
        with open(output_base / "hs_time_merge", 'w') as f:
            f.write(f'{duration}\n')
    hs_hashes = hash_result(test_base, output_base)
    return (result.returncode, (merge_result.returncode if do_merge else 0)), (result.stdout + (merge_result.stdout if do_merge else b"")), hs_hashes

if __name__ == '__main__':
    args = parser.parse_args()
    test_base = Path(__file__).parent.resolve()
    hs_base = test_base.parent.parent.parent.parent
    bench_base = test_base.parent
    local_name = os.sep.join(test_base.parts[-2:])
    output_base = hs_base / "report" / "output" / local_name
    if args.target in ["original"]:
        output_base.mkdir(parents=True, exist_ok=True)
        output_orig = do_original_run(test_base, output_base, do_merge=args.merge)
        exit(0)
    run_hs = False
    run_sh = False
    if args.target in ["hs-only", "both"]:
        run_hs = True
    if args.target in ["sh-only", "both"]:
        run_sh = True
    if not run_hs and not run_sh:
        raise("Not running anything, add --target argument")
    output_base.mkdir(parents=True, exist_ok=True)
    if run_sh:
        output_sh = do_sh_run(test_base, output_base, do_merge=args.merge)
    if run_hs:
        output_hs = do_hs_run(test_base, output_base, hs_base, args.window, args.log == 'enable', do_merge=args.merge)
    if run_sh and run_hs:
        with open(output_base / 'error', 'w') as errf:
            if output_sh == output_hs:
                errf.write('')
            else:
                errf.write('error\n')
                errf.write(f'return code {output_sh[0]} vs {output_hs[0]}\n')
                errf.write(f'==== output sh ====\n')
                errf.write(output_sh[1].decode('UTF-8'))
                errf.write(output_sh[2].decode('UTF-8'))
                errf.write(f'==== output hs ====\n')
                errf.write(output_hs[1].decode('UTF-8'))
                errf.write(output_hs[2].decode('UTF-8'))
